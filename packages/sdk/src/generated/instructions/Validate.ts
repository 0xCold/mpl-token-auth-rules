/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { ValidateArgs, validateArgsBeet } from '../types/ValidateArgs';

/**
 * @category Instructions
 * @category Validate
 * @category generated
 */
export type ValidateInstructionArgs = {
  validateArgs: ValidateArgs;
};
/**
 * @category Instructions
 * @category Validate
 * @category generated
 */
export const ValidateStruct = new beet.FixableBeetArgsStruct<
  ValidateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['validateArgs', validateArgsBeet],
  ],
  'ValidateInstructionArgs',
);
/**
 * Accounts required by the _Validate_ instruction
 *
 * @property [] ruleSet The PDA account where the RuleSet is stored
 * @category Instructions
 * @category Validate
 * @category generated
 */
export type ValidateInstructionAccounts = {
  ruleSet: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const validateInstructionDiscriminator = 1;

/**
 * Creates a _Validate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Validate
 * @category generated
 */
export function createValidateInstruction(
  accounts: ValidateInstructionAccounts,
  args: ValidateInstructionArgs,
  programId = new web3.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'),
) {
  const [data] = ValidateStruct.serialize({
    instructionDiscriminator: validateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.ruleSet,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
