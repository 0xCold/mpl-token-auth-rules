/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  CreateFrequencyRuleArgs,
  createFrequencyRuleArgsBeet,
} from '../types/CreateFrequencyRuleArgs';

/**
 * @category Instructions
 * @category CreateFrequencyRule
 * @category generated
 */
export type CreateFrequencyRuleInstructionArgs = {
  createFrequencyRuleArgs: CreateFrequencyRuleArgs;
};
/**
 * @category Instructions
 * @category CreateFrequencyRule
 * @category generated
 */
export const CreateFrequencyRuleStruct = new beet.FixableBeetArgsStruct<
  CreateFrequencyRuleInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createFrequencyRuleArgs', createFrequencyRuleArgsBeet],
  ],
  'CreateFrequencyRuleInstructionArgs',
);
/**
 * Accounts required by the _CreateFrequencyRule_ instruction
 *
 * @property [_writable_, **signer**] payer Payer and creator of the Frequency Rule
 * @property [_writable_] frequencyPda The PDA account where the Frequency Rule is stored
 * @category Instructions
 * @category CreateFrequencyRule
 * @category generated
 */
export type CreateFrequencyRuleInstructionAccounts = {
  payer: web3.PublicKey;
  frequencyPda: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const createFrequencyRuleInstructionDiscriminator = 2;

/**
 * Creates a _CreateFrequencyRule_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateFrequencyRule
 * @category generated
 */
export function createCreateFrequencyRuleInstruction(
  accounts: CreateFrequencyRuleInstructionAccounts,
  args: CreateFrequencyRuleInstructionArgs,
  programId = new web3.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'),
) {
  const [data] = CreateFrequencyRuleStruct.serialize({
    instructionDiscriminator: createFrequencyRuleInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.frequencyPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
