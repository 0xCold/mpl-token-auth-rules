/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { CreateArgs, createArgsBeet } from '../types/CreateArgs';

/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionArgs = {
  createArgs: CreateArgs;
};
/**
 * @category Instructions
 * @category Create
 * @category generated
 */
export const CreateStruct = new beet.FixableBeetArgsStruct<
  CreateInstructionArgs & {
    instructionDiscriminator: number;
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createArgs', createArgsBeet],
  ],
  'CreateInstructionArgs',
);
/**
 * Accounts required by the _Create_ instruction
 *
 * @property [_writable_, **signer**] payer Payer and creator of the rule set
 * @property [_writable_] rulesetPda The PDA account where the ruleset is stored
 * @property [_writable_] frequency (optional) Optional frequency account
 * @category Instructions
 * @category Create
 * @category generated
 */
export type CreateInstructionAccounts = {
  payer: web3.PublicKey;
  rulesetPda: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  frequency?: web3.PublicKey;
};

export const createInstructionDiscriminator = 0;

/**
 * Creates a _Create_ instruction.
 *
 * Optional accounts that are not provided will be omitted from the accounts
 * array passed with the instruction.
 * An optional account that is set cannot follow an optional account that is unset.
 * Otherwise an Error is raised.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Create
 * @category generated
 */
export function createCreateInstruction(
  accounts: CreateInstructionAccounts,
  args: CreateInstructionArgs,
  programId = new web3.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'),
) {
  const [data] = CreateStruct.serialize({
    instructionDiscriminator: createInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rulesetPda,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.frequency != null) {
    keys.push({
      pubkey: accounts.frequency,
      isWritable: true,
      isSigner: false,
    });
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
