/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import { PayloadType, payloadTypeBeet } from './PayloadType';
/**
 * This type is used to derive the {@link PayloadField} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PayloadField} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PayloadFieldRecord = {
  Target: { fields: [PayloadType] };
  Holder: { fields: [PayloadType] };
  Authority: { fields: [PayloadType] };
  Amount: { fields: [beet.bignum] };
};

/**
 * Union type respresenting the PayloadField data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPayloadField*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PayloadField = beet.DataEnumKeyAsKind<PayloadFieldRecord>;

export const isPayloadFieldTarget = (x: PayloadField): x is PayloadField & { __kind: 'Target' } =>
  x.__kind === 'Target';
export const isPayloadFieldHolder = (x: PayloadField): x is PayloadField & { __kind: 'Holder' } =>
  x.__kind === 'Holder';
export const isPayloadFieldAuthority = (
  x: PayloadField,
): x is PayloadField & { __kind: 'Authority' } => x.__kind === 'Authority';
export const isPayloadFieldAmount = (x: PayloadField): x is PayloadField & { __kind: 'Amount' } =>
  x.__kind === 'Amount';

/**
 * @category userTypes
 * @category generated
 */
export const payloadFieldBeet = beet.dataEnum<PayloadFieldRecord>([
  [
    'Target',
    new beet.FixableBeetArgsStruct<PayloadFieldRecord['Target']>(
      [['fields', beet.tuple([payloadTypeBeet])]],
      'PayloadFieldRecord["Target"]',
    ),
  ],
  [
    'Holder',
    new beet.FixableBeetArgsStruct<PayloadFieldRecord['Holder']>(
      [['fields', beet.tuple([payloadTypeBeet])]],
      'PayloadFieldRecord["Holder"]',
    ),
  ],
  [
    'Authority',
    new beet.FixableBeetArgsStruct<PayloadFieldRecord['Authority']>(
      [['fields', beet.tuple([payloadTypeBeet])]],
      'PayloadFieldRecord["Authority"]',
    ),
  ],
  [
    'Amount',
    new beet.BeetArgsStruct<PayloadFieldRecord['Amount']>(
      [['fields', beet.fixedSizeTuple([beet.u64])]],
      'PayloadFieldRecord["Amount"]',
    ),
  ],
]) as beet.FixableBeet<PayloadField>;
